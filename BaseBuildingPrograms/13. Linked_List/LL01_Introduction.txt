// A linked list is a linear data structure in which elements are stored in nodes, and each node
// points to the next node in the sequence. Unlike arrays, linked lists do not require contiguous
// memory locations. Instead, each node contains data and a reference (or link) to the next node in
// the sequence. Some properties of linked list are:
// 1) It is non contiguous, unlike arrays or vectors which are contiguous
// 2) Less wastage of memory than vectors
// 3) Insertion of element or shifting elements take constant time O(1), unlike arrays or vectors
//    which takes O(n) to execute these operations.
// 4) It can be grown or shrink dynamically at runtime, like vectors.
// 5) Linked lists do not have indices, they have concept of address.

// The basic building block of a linked list is a node, and a node typically has two fields:
// -> Data Field: Contains the actual data or value of the node.
// -> Next Field (or Link): Points to the next node, i.e. stores address of next node in the sequence.

// Types of linked list:
// 1) Singly linked list
// 2) Doubly linked list
// 3) Circular singly linked list
// 4) Circular doubly linked list